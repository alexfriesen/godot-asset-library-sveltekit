generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AssetPreview {
  preview_id BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  type_id    Int     @db.TinyInt
  link       String  @db.Text
  thumbnail  String? @db.Text
  caption    String? @db.Text
  asset_id   BigInt  @db.UnsignedBigInt
  asset      Asset   @relation(fields: [asset_id], references: [asset_id], onUpdate: Restrict, map: "asset_previews_asset_id_foreign")

  @@index([asset_id], map: "asset_previews_asset_id_foreign")
  @@map("asset_previews")
}

model AssetReviewReply {
  id              BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  comment         String?     @db.Text
  html_comment    String?     @db.Text
  created_at      DateTime?   @db.Timestamp(0)
  updated_at      DateTime?   @db.Timestamp(0)
  asset_review_id BigInt      @unique(map: "asset_review_replies_asset_review_id_unique") @db.UnsignedBigInt
  asset_review    AssetReview @relation(fields: [asset_review_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "asset_review_replies_asset_review_id_foreign")

  @@map("asset_review_replies")
}

model AssetReview {
  id                 BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  is_positive        Boolean
  comment            String?           @db.Text
  html_comment       String?           @db.Text
  created_at         DateTime?         @db.Timestamp(0)
  updated_at         DateTime?         @db.Timestamp(0)
  asset_id           BigInt            @db.UnsignedBigInt
  author_id          BigInt            @db.UnsignedBigInt
  asset              Asset             @relation(fields: [asset_id], references: [asset_id], onUpdate: Restrict, map: "asset_reviews_asset_id_foreign")
  user               User              @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "asset_reviews_author_id_foreign")
  asset_review_reply AssetReviewReply?

  @@index([asset_id], map: "asset_reviews_asset_id_foreign")
  @@index([author_id], map: "asset_reviews_author_id_foreign")
  @@map("asset_reviews")
}

model AssetVersion {
  id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  version_string String   @db.VarChar(255)
  godot_version  String   @db.VarChar(255)
  download_url   String?  @db.VarChar(255)
  created_at     DateTime @db.DateTime(0)
  modify_date    DateTime @db.DateTime(0)
  asset_id       BigInt   @db.UnsignedBigInt
  asset          Asset    @relation(fields: [asset_id], references: [asset_id], onUpdate: Restrict, map: "asset_versions_asset_id_foreign")

  @@index([asset_id], map: "asset_versions_asset_id_foreign")
  @@map("asset_versions")
}

model Asset {
  asset_id         BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  title            String         @db.VarChar(255)
  blurb            String?        @db.VarChar(255)
  category_id      Int            @db.TinyInt
  cost             String         @db.VarChar(255)
  support_level_id Int            @default(1) @db.TinyInt
  description      String         @db.Text
  html_description String         @db.Text
  tags             String?        @db.Text
  browse_url       String         @db.Text
  issues_url       String?        @db.Text
  changelog_url    String?        @db.Text
  donate_url       String?        @db.Text
  icon_url         String?        @db.Text
  created_at       DateTime       @db.DateTime(0)
  modify_date      DateTime       @db.DateTime(0)
  is_published     Boolean        @default(true)
  is_archived      Boolean        @default(false)
  score            Int            @default(0)
  author_id        BigInt         @db.UnsignedBigInt
  user             User           @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "assets_author_id_foreign")
  asset_previews   AssetPreview[]
  asset_reviews    AssetReview[]
  asset_versions   AssetVersion[]

  @@index([author_id], map: "assets_author_id_foreign")
  @@fulltext([title, blurb, tags])
  @@map("assets")
}

model Migration {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int

  @@map("migrations")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model PasswordReset {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@map("password_resets")
  @@ignore
}

model User {
  id                BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  username          String        @unique(map: "users_username_unique") @db.VarChar(255)
  full_name         String?       @db.VarChar(255)
  email             String        @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?     @db.Timestamp(0)
  password          String?       @db.VarChar(255)
  provider          String?       @db.VarChar(255)
  provider_id       String?       @db.VarChar(255)
  is_admin          Boolean       @default(false)
  is_blocked        Boolean       @default(false)
  remember_token    String?       @db.VarChar(100)
  created_at        DateTime?     @db.Timestamp(0)
  updated_at        DateTime?     @db.Timestamp(0)
  asset_reviews     AssetReview[]
  assets            Asset[]

  @@map("users")
}
